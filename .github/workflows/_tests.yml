---

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      image:
        required: true
        type: string

defaults:
  run:
    shell: bash

env:
  tessdata_version: "4.1.0"
  tessdata_path: "./data/tessdata"
  db_password: "YourStrongPassw0rd"

jobs:
  dotnet:
    runs-on: ${{ inputs.image }}
    steps:
    - name: checkout
      uses: actions/checkout@v2.4.0
    - name: setup .NET
      # NOTE(rkm 2022-02-20) Uses global.json
      uses: actions/setup-dotnet@v1
    - name: cache tessdata
      id: cache-tessdata
      uses: actions/cache@v2.1.7
      with:
        path: ${{ env.tessdata_path }}
        key: 'tessdata|${{ env.tessdata_version }}|v5'
    - name: download tessdata
      if: steps.cache-tessdata.outputs.cache-hit != 'true'
      run: |
        set -euxo pipefail
        mkdir -p "${{ env.tessdata_path }}"
        curl \
            --location --silent \
            https://github.com/tesseract-ocr/tessdata/raw/${{ env.tessdata_version }}/eng.traineddata \
            --output "${{ env.tessdata_path }}/eng.traineddata"
    - name: start linux services
      if: ${{ inputs.os == 'linux' }}
      run: |
        set -euxo pipefail

        docker run \
            --rm \
            -v`pwd`/utils/docker-compose:/run \
            --user $(id -u):$(id -g) \
            safewaters/docker-lock \
                lock rewrite \
                --lockfile-name linux-dotnet.yml.lock

        cat ./utils/docker-compose/linux-dotnet.yml

        docker-compose -f ./utils/docker-compose/linux-dotnet.yml up -d

        ./utils/wait-for.bash "docker exec rabbitmq rabbitmq-diagnostics -q ping"
        ./utils/wait-for.bash "docker exec mariadb mysqladmin -uroot -p${{ env.db_password }} status"
        ./utils/wait-for.bash "docker exec redis /usr/local/bin/redis-cli PING"
        ./utils/wait-for.bash "docker exec mssql /opt/mssql-tools/bin/sqlcmd -U sa -P ${{ env.db_password }} -l 1 -Q 'SELECT @@VERSION'"
        ./utils/wait-for.bash "docker exec mongodb /usr/bin/mongo --quiet --eval 'db.stats().ok'"
        docker exec mongodb mongo --eval "rs.initiate()"
